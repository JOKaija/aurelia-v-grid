{"version":3,"sources":["vGrid/v-grid-observables.js"],"names":["VGridObservables","vGrid","bindingEngine","subscriptionsAttributes","collectionSubscription","subscriptionsArray","enableObservablesCollection","x","y","disableObservablesArray","vGridCollectionFiltered","vGridCollection","slice","checkKeys","vGridCurrentRow","vGridSort","reset","vGridConfig","keepFilterOnCollectionChange","vGridGenerator","rebuildGridHeaderHtmlAndViewSlot","vGridSelection","collectionChange","vGridCurrentEntityRef","k","vGridCurrentEntity","hasOwnProperty","undefined","enableObservablesArray","__observers__","subscribe","collectioncallable","arrayObserver","collectionObserver","arrayObserverChanges","colFiltered","col","grid","curKey","vGridRowKey","curEntityValid","length","added","toRemove","forEach","observerChange","addedCount","i","push","index","checkKey","removed","rowToRemove","row","splice","newRowNo","enableObservablesAttributes","attAttributeObserve","property","propertyObserver","newValue","oldValue","newValueCheck","toString","oldValueCheck","rebindRowNumber","disableObservablesCollection","unsubscribe","dispose","disableObservablesAttributes","e"],"mappings":";;;;;;;;;;;;;;;;kCAMaA,gB;AAGX,kCAAYC,KAAZ,EAAmBC,aAAnB,EAAkC;AAAA;;AAChC,eAAKA,aAAL,GAAqBA,aAArB;AACA,eAAKD,KAAL,GAAaA,KAAb;AACA,eAAKE,uBAAL,GAA+B,EAA/B;AACA,eAAKC,sBAAL,GAA8B,IAA9B;AACA,eAAKC,kBAAL,GAA0B,EAA1B;AACD;;mCAMDC,2B,0CAA8B;AAAA;;AAE5B,cAAIF,yBAAyB,SAAzBA,sBAAyB,CAACG,CAAD,EAAIC,CAAJ,EAAU;AAGrC,kBAAKC,uBAAL;;AAIA,kBAAKR,KAAL,CAAWS,uBAAX,GAAqC,MAAKT,KAAL,CAAWU,eAAX,CAA2BC,KAA3B,CAAiC,CAAjC,CAArC;AACA,kBAAKX,KAAL,CAAWY,SAAX;;AAIA,kBAAKZ,KAAL,CAAWa,eAAX,GAA6B,CAAC,CAA9B;;AAEA,kBAAKb,KAAL,CAAWc,SAAX,CAAqBC,KAArB;AACA,gBAAG,CAAC,MAAKf,KAAL,CAAWgB,WAAX,CAAuBC,4BAA3B,EAAwD;AAEtD,oBAAKjB,KAAL,CAAWc,SAAX,CAAqBC,KAArB;AACA,oBAAKf,KAAL,CAAWkB,cAAX,CAA0BC,gCAA1B;;AAEA,oBAAKnB,KAAL,CAAWoB,cAAX,CAA0BL,KAA1B;AACA,oBAAKf,KAAL,CAAWgB,WAAX,CAAuBC,4BAAvB,GAAsD,KAAtD;AACD;AACD,kBAAKjB,KAAL,CAAWkB,cAAX,CAA0BG,gBAA1B;;AAGA,kBAAKrB,KAAL,CAAWsB,qBAAX,GAAmC,IAAnC;AACA,iBAAK,IAAIC,CAAT,IAAc,MAAKvB,KAAL,CAAWwB,kBAAzB,EAA6C;AAC3C,kBAAI,MAAKxB,KAAL,CAAWwB,kBAAX,CAA8BC,cAA9B,CAA6CF,CAA7C,CAAJ,EAAqD;AACnD,sBAAKvB,KAAL,CAAWwB,kBAAX,CAA8BD,CAA9B,IAAmCG,SAAnC;AACD;AACF;;AAID,kBAAKC,sBAAL;AAID,WAvCD;AAwCA,eAAK3B,KAAL,CAAW4B,aAAX,CAAyBlB,eAAzB,CAAyCmB,SAAzC,CAAmD,KAAK7B,KAAxD,EAA8DG,sBAA9D;AACA,eAAK2B,kBAAL,GAA0B3B,sBAA1B;;AAEA,eAAKA,sBAAL,GAA8B,KAAKH,KAAL,CAAW4B,aAAX,CAAyBlB,eAAvD;AAED,S;;mCAMDiB,sB,qCAAyB;AAAA;;AAEvB,cAAII,gBAAgB,KAAK9B,aAAL,CAAmB+B,kBAAnB,CAAsC,KAAKhC,KAAL,CAAWU,eAAjD,EAAkEmB,SAAlE,CAA4E,UAACI,oBAAD,EAA0B;;AAExH,gBAAIC,cAAc,OAAKlC,KAAL,CAAWS,uBAA7B;AACA,gBAAI0B,MAAM,OAAKnC,KAAL,CAAWU,eAArB;AACA,gBAAI0B,OAAO,OAAKpC,KAAL,CAAWkB,cAAtB;;AAGA,gBAAImB,SAAS,CAAC,CAAd;AACA,gBAAI,OAAKrC,KAAL,CAAWsB,qBAAf,EAAsC;AACpCe,uBAAS,OAAKrC,KAAL,CAAWsB,qBAAX,CAAiC,OAAKtB,KAAL,CAAWsC,WAA5C,CAAT;AACD;AACD,gBAAIC,iBAAiB,IAArB;;AAGA,gBAAIN,qBAAqBO,MAArB,GAA8B,CAAlC,EAAqC;;AAEnC,kBAAIC,QAAQ,KAAZ;AACA,kBAAIC,WAAW,EAAf;;AAGAT,mCAAqBU,OAArB,CAA6B,UAACC,cAAD,EAAmB;AAG9C,oBAAIA,eAAeC,UAAf,GAA4B,CAAhC,EAAmC;AACjC,uBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,eAAeC,UAAnC,EAA+CC,GAA/C,EAAoD;AAClDZ,gCAAYa,IAAZ,CAAiBZ,IAAIS,eAAeI,KAAf,GAAuBF,CAA3B,CAAjB;AACA,2BAAK9C,KAAL,CAAWiD,QAAX,CAAoBd,IAAIS,eAAeI,KAAf,GAAuBF,CAA3B,CAApB;AACD;AACF;;AAGD,oBAAIF,eAAeM,OAAf,CAAuBV,MAAvB,GAAgC,CAApC,EAAuC;AAErCI,iCAAeM,OAAf,CAAuBP,OAAvB,CAA+B,UAACrC,CAAD,EAAO;AACpC,wBAAIA,EAAE,OAAKN,KAAL,CAAWsC,WAAb,MAA8BD,MAAlC,EAA0C;AACxCE,uCAAiB,KAAjB;AACD;;AAED,wBAAIY,cAAc,CAAC,CAAnB;AACAjB,gCAAYS,OAAZ,CAAoB,UAACS,GAAD,EAAMJ,KAAN,EAAgB;AAClC,0BAAII,IAAI,OAAKpD,KAAL,CAAWsC,WAAf,MAAgChC,EAAE,OAAKN,KAAL,CAAWsC,WAAb,CAApC,EAA+D;AAC7Da,sCAAcH,KAAd;AACD;AACF,qBAJD;AAKA,wBAAIG,gBAAgB,CAAC,CAArB,EAAwB;AACtBjB,kCAAYmB,MAAZ,CAAmBF,WAAnB,EAAgC,CAAhC;AACD;AACF,mBAdD;AAeD;AACF,eA7BD;;AAgCA,kBAAIG,WAAW,CAAC,CAAhB;;AAGA,kBAAI,CAACf,cAAL,EAAqB;AAGnB,qBAAK,IAAIhB,CAAT,IAAc,OAAKvB,KAAL,CAAWwB,kBAAzB,EAA6C;AAC3C,sBAAI,OAAKxB,KAAL,CAAWwB,kBAAX,CAA8BC,cAA9B,CAA6CF,CAA7C,CAAJ,EAAqD;AACnD,2BAAKvB,KAAL,CAAWwB,kBAAX,CAA8BD,CAA9B,IAAmCG,SAAnC;AACD;AACF;AACD,uBAAK1B,KAAL,CAAWsB,qBAAX,GAAmC,IAAnC;AACA,uBAAKtB,KAAL,CAAWa,eAAX,GAA6B,CAAC,CAA9B;AAED,eAXD,MAWO;AAGL,oBAAIwB,WAAW,CAAC,CAAhB,EAAmB;AACjB,yBAAKrC,KAAL,CAAWS,uBAAX,CAAmCkC,OAAnC,CAA2C,UAACrC,CAAD,EAAI0C,KAAJ,EAAc;AACvD,wBAAIX,WAAW/B,EAAE,OAAKN,KAAL,CAAWsC,WAAb,CAAf,EAA0C;AACxC,6BAAKtC,KAAL,CAAWa,eAAX,GAA6BmC,KAA7B;AACD;AACF,mBAJD;AAKD;AAEF;AAIDZ,mBAAKf,gBAAL,CAAsB,KAAtB;AAGD;AAGF,WAvFmB,CAApB;AAwFA,eAAKjB,kBAAL,GAA0B2B,aAA1B;AACD,S;;mCAMDwB,2B,0CAA8B;AAAA;;AAC5B,eAAKvD,KAAL,CAAWgB,WAAX,CAAuBwC,mBAAvB,CAA2Cb,OAA3C,CAAmD,UAACc,QAAD,EAAc;AAC/D,gBAAIC,mBAAmB,OAAKzD,aAAL,CAAmByD,gBAAnB,CAAoC,OAAK1D,KAAL,CAAWwB,kBAA/C,EAAmEiC,QAAnE,EAA6E5B,SAA7E,CAAuF,UAAC8B,QAAD,EAAWC,QAAX,EAAwB;AAGpI,kBAAIC,gBAAiBF,aAAajC,SAAb,IAA0BiC,aAAa,IAAxC,GAAgDA,SAASG,QAAT,EAAhD,GAAsEH,QAA1F;AACA,kBAAII,gBAAiBH,aAAalC,SAAb,IAA0BkC,aAAa,IAAxC,GAAgDA,SAASE,QAAT,EAAhD,GAAsEF,QAA1F;;AAEA,kBAAIC,kBAAkBE,aAAlB,IAAmC,OAAK/D,KAAL,CAAWsB,qBAAlD,EAAyE;AACnE,uBAAKtB,KAAL,CAAWsB,qBAAX,CAAiCmC,QAAjC,IAA6CE,QAA7C;AACA,uBAAK3D,KAAL,CAAWkB,cAAX,CAA0B8C,eAA1B,CAA0C,OAAKhE,KAAL,CAAWa,eAArD;AACL;AACF,aAVsB,CAAvB;AAWA,mBAAKX,uBAAL,CAA6B6C,IAA7B,CAAkCW,gBAAlC;AACD,WAbD;AAcD,S;;mCAMDO,4B,2CAA+B;AAC7B,eAAK9D,sBAAL,CAA4B+D,WAA5B,CAAwC,KAAKlE,KAA7C,EAAoD,KAAK8B,kBAAzD;AAED,S;;mCAMDtB,uB,sCAA0B;AACxB,eAAKJ,kBAAL,CAAwB+D,OAAxB;AACA,eAAK/D,kBAAL,GAA0B,IAA1B;AACD,S;;mCAMDgE,4B,2CAA+B;AAC7B,eAAK,IAAItB,IAAI,CAAb,EAAgBA,IAAI,KAAK5C,uBAAL,CAA6BsC,MAAjD,EAAyDM,GAAzD,EAA8D;AAC5D,gBAAI;AACF,mBAAK5C,uBAAL,CAA6B4C,CAA7B,EAAgCqB,OAAhC;AACD,aAFD,CAEE,OAAOE,CAAP,EAAU,CACX;AACF;AACD,eAAKnE,uBAAL,GAA+B,EAA/B;AACD,S","file":"vGrid/v-grid-observables.js","sourceRoot":"/source/","sourcesContent":["/*****************************************************************************************************************\r\n *    VGridObservables\r\n *    Observers the vGridCollection/current entity for changes\r\n *    Created by vegar ringdal\r\n *\r\n ****************************************************************************************************************/\r\nexport class VGridObservables {\r\n\r\n\r\n  constructor(vGrid, bindingEngine) {\r\n    this.bindingEngine = bindingEngine;\r\n    this.vGrid = vGrid;\r\n    this.subscriptionsAttributes = []; //here I keep subscriptions to observer on attributes\r\n    this.collectionSubscription = null; //here I keep subscriptions to observer on collection\r\n    this.subscriptionsArray = []; //my property subscriptions\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * observer vGridCollection, when entire vGridCollection gets replaced\r\n   ***************************************************************************************/\r\n  enableObservablesCollection() {\r\n\r\n    let collectionSubscription = (x, y) => {\r\n\r\n      //disable array observer\r\n      this.disableObservablesArray();\r\n\r\n      //clone array\r\n      //key will be set in both collection and internal since with slice we get a refrence\r\n      this.vGrid.vGridCollectionFiltered = this.vGrid.vGridCollection.slice(0);\r\n      this.vGrid.checkKeys();\r\n\r\n\r\n      //reset filter/and collection/selection. (should I have option to check is they want to set something?)\r\n      this.vGrid.vGridCurrentRow = -1;\r\n\r\n      this.vGrid.vGridSort.reset();\r\n      if(!this.vGrid.vGridConfig.keepFilterOnCollectionChange){\r\n        //clear sort icons //todo improve with event\r\n        this.vGrid.vGridSort.reset();\r\n        this.vGrid.vGridGenerator.rebuildGridHeaderHtmlAndViewSlot();\r\n\r\n        this.vGrid.vGridSelection.reset();\r\n        this.vGrid.vGridConfig.keepFilterOnCollectionChange = false;\r\n      }\r\n      this.vGrid.vGridGenerator.collectionChange();\r\n\r\n      //reset\r\n      this.vGrid.vGridCurrentEntityRef = null;\r\n      for (var k in this.vGrid.vGridCurrentEntity) {\r\n        if (this.vGrid.vGridCurrentEntity.hasOwnProperty(k)) {\r\n          this.vGrid.vGridCurrentEntity[k] = undefined;\r\n        }\r\n      }\r\n\r\n\r\n      //set array observer\r\n      this.enableObservablesArray();\r\n\r\n\r\n\r\n    };\r\n    this.vGrid.__observers__.vGridCollection.subscribe(this.vGrid,collectionSubscription);\r\n    this.collectioncallable = collectionSubscription;\r\n\r\n    this.collectionSubscription = this.vGrid.__observers__.vGridCollection;\r\n\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * enable attributes observables, like vGridCollection.push/pop/slice, etc etc\r\n   ***************************************************************************************/\r\n  enableObservablesArray() {\r\n\r\n    let arrayObserver = this.bindingEngine.collectionObserver(this.vGrid.vGridCollection).subscribe((arrayObserverChanges) => {\r\n\r\n      var colFiltered = this.vGrid.vGridCollectionFiltered;\r\n      var col = this.vGrid.vGridCollection;\r\n      var grid = this.vGrid.vGridGenerator;\r\n\r\n\r\n      var curKey = -1;\r\n      if (this.vGrid.vGridCurrentEntityRef) {\r\n        curKey = this.vGrid.vGridCurrentEntityRef[this.vGrid.vGridRowKey];\r\n      }\r\n      var curEntityValid = true;\r\n\r\n\r\n      if (arrayObserverChanges.length > 0) {\r\n\r\n        var added = false;\r\n        var toRemove = [];\r\n\r\n        //loop arrayObserverChanges\r\n        arrayObserverChanges.forEach((observerChange)=> {\r\n\r\n          //if anyone is added, then lets add them\r\n          if (observerChange.addedCount > 0) {\r\n            for (var i = 0; i < observerChange.addedCount; i++) {\r\n              colFiltered.push(col[observerChange.index + i]);\r\n              this.vGrid.checkKey(col[observerChange.index + i]);\r\n            }\r\n          }\r\n\r\n          //if anyone is removed, then lets remove them from our filtered collection\r\n          if (observerChange.removed.length > 0) {\r\n            //push into removed array\r\n            observerChange.removed.forEach((x) => {\r\n              if (x[this.vGrid.vGridRowKey] === curKey) {\r\n                curEntityValid = false;\r\n              }\r\n\r\n              var rowToRemove = -1;\r\n              colFiltered.forEach((row, index) => {\r\n                if (row[this.vGrid.vGridRowKey] === x[this.vGrid.vGridRowKey]) {\r\n                  rowToRemove = index;\r\n                }\r\n              });\r\n              if (rowToRemove !== -1) {\r\n                colFiltered.splice(rowToRemove, 1);\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n\r\n        var newRowNo = -1;\r\n\r\n        //check current entity, remove if removed, or get key/row\r\n        if (!curEntityValid) {\r\n\r\n          //no current entity, lets remove the result and null out ref/row\r\n          for (var k in this.vGrid.vGridCurrentEntity) {\r\n            if (this.vGrid.vGridCurrentEntity.hasOwnProperty(k)) {\r\n              this.vGrid.vGridCurrentEntity[k] = undefined;\r\n            }\r\n          }\r\n          this.vGrid.vGridCurrentEntityRef = null;\r\n          this.vGrid.vGridCurrentRow = -1;\r\n\r\n        } else {\r\n\r\n          //if there is a current entity, then we need to find the row of the key\r\n          if (curKey !== -1) {\r\n            this.vGrid.vGridCollectionFiltered.forEach((x, index) => {\r\n              if (curKey === x[this.vGrid.vGridRowKey]) {\r\n                this.vGrid.vGridCurrentRow = index;\r\n              }\r\n            });\r\n          }\r\n\r\n        }//end if (!curEntityValid)\r\n\r\n\r\n        //update grid\r\n        grid.collectionChange(false);\r\n\r\n\r\n      }\r\n\r\n\r\n    });\r\n    this.subscriptionsArray = arrayObserver\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * enable attributes abservables, ->vGridCollection.name etc\r\n   ***************************************************************************************/\r\n  enableObservablesAttributes() {\r\n    this.vGrid.vGridConfig.attAttributeObserve.forEach((property) => {\r\n      let propertyObserver = this.bindingEngine.propertyObserver(this.vGrid.vGridCurrentEntity, property).subscribe((newValue, oldValue) => {\r\n\r\n        //should I do the value formatting on the currentEntity also?\r\n        var newValueCheck = (newValue !== undefined && newValue !== null) ? newValue.toString() : newValue;\r\n        var oldValueCheck = (oldValue !== undefined && oldValue !== null) ? oldValue.toString() : oldValue;\r\n\r\n        if (newValueCheck !== oldValueCheck && this.vGrid.vGridCurrentEntityRef) {\r\n              this.vGrid.vGridCurrentEntityRef[property] = newValue;\r\n              this.vGrid.vGridGenerator.rebindRowNumber(this.vGrid.vGridCurrentRow);\r\n        }\r\n      });\r\n      this.subscriptionsAttributes.push(propertyObserver)\r\n    });\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   *  disable vGridCollection observables\r\n   ***************************************************************************************/\r\n  disableObservablesCollection() {\r\n    this.collectionSubscription.unsubscribe(this.vGrid, this.collectioncallable);\r\n    //this.collectionSubscription = null;\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * disable the array observables\r\n   ***************************************************************************************/\r\n  disableObservablesArray() {\r\n    this.subscriptionsArray.dispose();\r\n    this.subscriptionsArray = null;\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * disable the attibutes observables\r\n   ***************************************************************************************/\r\n  disableObservablesAttributes() {\r\n    for (var i = 0; i < this.subscriptionsAttributes.length; i++) {\r\n      try {\r\n        this.subscriptionsAttributes[i].dispose()\r\n      } catch (e) {\r\n      }\r\n    }\r\n    this.subscriptionsAttributes = [];\r\n  }\r\n\r\n\r\n}\r\n"]}