{"version":3,"sources":["vGrid/v-grid-attributes-dragDropCol.js"],"names":["inject","customAttribute","VGrid","vGridDragDropCol","Element","element","vGrid","dragEl","canMove","sortable","onDragOverX","onDragOver","bind","onDragEndX","onDragEnd","bindingContext","overrideContext","attached","setDragHandles","rootEl","vGridGenerator","headerScrollElement","mainCol","addEventListener","onDragStart","drophelper","style","classList","add","nodeName","parentNode","document","createElement","width","bottom","top","left","parseInt","clientWidth","position","appendChild","onmouseenter","setDraggable","onmouseleave","newStatus","draggable","updateColumns","tempArr","vGridConfig","dragHandles","gridElement","getElementsByTagName","slice","call","forEach","itemEl","index","push","getAttribute","setAttribute","oldI","newI","colConfig","rowTemplate","rebuildColumnsRows","evt","target","colNo","event","CustomEvent","detail","bubbles","dispatchEvent","dataTransfer","effectAllowed","setData","setTimeout","preventDefault","stopPropagation","offsetParent","targetNode","after","insertBefore","nextElementSibling","remove","removeEventListener"],"mappings":"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","file":"vGrid/v-grid-attributes-dragDropCol.js","sourceRoot":"/source/","sourcesContent":["/*****************************************************************************************************************\r\n *    Drag drop columns for the grid\r\n *    can not be used with row-repeat... yet\r\n *    Created by vegar ringdal\r\n *\r\n ****************************************************************************************************************/\r\nimport {inject, customAttribute} from 'aurelia-framework';\r\nimport {VGrid} from './v-grid';\r\n\r\n\r\n@customAttribute('v-drag-drop-col')\r\n@inject(Element, VGrid)\r\nexport class vGridDragDropCol {\r\n\r\n\r\n  constructor(element, vGrid) {\r\n    this.vGrid = vGrid;\r\n    this.element = element;\r\n    this.dragEl;\r\n    this.canMove = false;\r\n    this.sortable = false;\r\n    this.onDragOverX = this.onDragOver.bind(this);\r\n    this.onDragEndX = this.onDragEnd.bind(this);\r\n  }\r\n\r\n\r\n  bind(bindingContext, overrideContext) {\r\n    this.bindingContext = bindingContext;\r\n    this.overrideContext = overrideContext;\r\n\r\n  }\r\n\r\n  attached() {\r\n    this.setDragHandles();\r\n\r\n    //need to be better, will change when I rebuild header into custom element\r\n    this.rootEl = this.vGrid.vGridGenerator.headerScrollElement; //this is BAD!\r\n\r\n    //add event listeners for draggable\r\n    this.mainCol.addEventListener('dragstart', this.onDragStart.bind(this), false);\r\n\r\n\r\n    //event listener for when starting to drag\r\n    this.vGrid.element.addEventListener(\"vGridDragStart\", ()=> {\r\n      this.drophelper.style[\"z-index\"] = \"100\";\r\n    });\r\n\r\n\r\n    //event listener when stopped dragging\r\n    this.vGrid.element.addEventListener(\"vGridDragStop\", ()=> {\r\n      this.drophelper.style[\"z-index\"] = \"-100\";\r\n    });\r\n\r\n\r\n  }\r\n\r\n\r\n  /***************************************************\r\n   * sets drag handle\r\n   *****************************************************/\r\n  setDragHandles() {\r\n\r\n    //add drag class\r\n    this.element.classList.add(\"vGrid-vGridDragHandle\");\r\n\r\n\r\n    //get column element\r\n    let mainCol = this.element;\r\n    while (mainCol.nodeName !== 'V-GRID-HEADER-COL') {\r\n      mainCol = mainCol.parentNode;\r\n    }\r\n    this.mainCol = mainCol;\r\n\r\n\r\n    //create drop helper (so we dont get switching on wide columns)\r\n    var drophelper = document.createElement(\"v-grid-drop\");\r\n    drophelper.style.width = \"30px\";\r\n    drophelper.style.bottom = 0;\r\n    drophelper.style.top = 0;\r\n    drophelper.style.left = parseInt(this.mainCol.clientWidth / 2) - 15 + \"px\";\r\n    //drophelper.style[\"background-color\"] = \"blue\"; //enable to see them\r\n    drophelper.style[\"z-index\"] = \"-100\";\r\n    drophelper.style.position = \"absolute\";\r\n    this.mainCol.appendChild(drophelper);\r\n    this.drophelper = drophelper;\r\n\r\n\r\n    //helpers\r\n    this.element.onmouseenter = () => {\r\n      this.canMove = true;\r\n      //add draggable to elements\r\n      this.setDraggable(true);\r\n    };\r\n\r\n\r\n    //helpers\r\n    this.element.onmouseleave = () => {\r\n      this.canMove = false;\r\n      //remove draggable to elements\r\n      this.setDraggable(false);\r\n    };\r\n\r\n\r\n  }\r\n\r\n\r\n  /***************************************************\r\n   * sets the elements draggable attribute\r\n   *****************************************************/\r\n  setDraggable(newStatus) {\r\n    this.mainCol.draggable = newStatus;\r\n  }\r\n\r\n\r\n  /***************************************************\r\n   * updates columns\r\n   *****************************************************/\r\n  updateColumns() {\r\n\r\n    //temp arrays\r\n    let tempArr = [];\r\n    let vGridConfig = [];\r\n\r\n\r\n    //loop em and build temp arrays and set new column number\r\n    var dragHandles = this.vGrid.vGridGenerator.gridElement.getElementsByTagName('v-grid-header-col');\r\n    [].slice.call(dragHandles).forEach((itemEl, index) => {\r\n      tempArr.push(parseInt(itemEl.getAttribute(\"column-no\")));\r\n      vGridConfig.push(null);\r\n      itemEl.setAttribute(\"column-no\", index);\r\n    });\r\n\r\n\r\n    //reorder to new column no\r\n    tempArr.forEach((oldI, newI) => {\r\n      vGridConfig[newI] = this.vGrid.vGridConfig.colConfig[oldI];\r\n    });\r\n\r\n\r\n    //set new columnconfig\r\n    this.vGrid.vGridConfig.colConfig = vGridConfig;\r\n\r\n\r\n    //reset template and fill data\r\n    this.vGrid.vGridGenerator.rowTemplate = null;\r\n\r\n\r\n    //rebuild the columns\r\n    this.vGrid.vGridGenerator.rebuildColumnsRows();\r\n\r\n\r\n  }\r\n\r\n\r\n  /***************************************************\r\n   * when starting dragging\r\n   *****************************************************/\r\n  onDragStart(evt) {\r\n\r\n    if (this.canMove) {\r\n\r\n      //get target\r\n      this.dragEl = evt.target;\r\n\r\n      //get our column no\r\n      this.colNo = parseInt(this.dragEl.getAttribute(\"column-no\"));\r\n\r\n      //dispatch event so all make  dropzone\r\n      let event = new CustomEvent(\"vGridDragStart\", {\r\n        detail: \"\",\r\n        bubbles: true\r\n      });\r\n      this.vGrid.element.dispatchEvent(event);\r\n\r\n\r\n      this.sortable = true;\r\n\r\n\r\n      evt.dataTransfer.effectAllowed = 'move';\r\n      evt.dataTransfer.setData('Text', '');\r\n\r\n      this.rootEl.addEventListener('dragover', this.onDragOverX, false);\r\n      this.rootEl.addEventListener('dragend', this.onDragEndX, false);\r\n\r\n      setTimeout(()=> {\r\n        this.dragEl.classList.add('ghost');\r\n      }, 0);\r\n    } else {\r\n      evt.preventDefault();\r\n    }\r\n\r\n  }\r\n\r\n\r\n  /***************************************************\r\n   * when dragging over event(moving)\r\n   *****************************************************/\r\n  onDragOver(evt) {\r\n\r\n    //why?\r\n    if (evt.preventDefault !== void 0) {\r\n      evt.preventDefault();\r\n      evt.stopPropagation();\r\n    }\r\n\r\n    //set temp col\r\n    let colNo = -1;\r\n\r\n    //get column\r\n    let target = evt.target;\r\n    if (target) {\r\n      while (target.nodeName !== 'V-GRID-HEADER-COL') {\r\n        target = target.offsetParent;\r\n      }\r\n\r\n      colNo = parseInt(target.getAttribute(\"column-no\"));\r\n      var targetNode = evt.target.nodeName === 'V-GRID-DROP';\r\n\r\n\r\n      if (colNo !== this.colNo && targetNode && colNo > -1) {\r\n        var after = colNo + 1 !== this.colNo;// && !isLong || halfway && isLong;\r\n\r\n        //reset colNo\r\n        this.colNo = colNo;\r\n\r\n        //move\r\n        this.rootEl.insertBefore(this.dragEl, after ? target.nextElementSibling : target);\r\n\r\n        //update columns\r\n        this.updateColumns();\r\n\r\n\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  /***************************************************\r\n   * when drag event have ended\r\n   *****************************************************/\r\n  onDragEnd(evt) {\r\n\r\n    evt.preventDefault();\r\n\r\n    //trigger dragdrop so all updates and remove ghost/events\r\n    let event = new CustomEvent(\"vGridDragStop\", {\r\n      detail: \"\",\r\n      bubbles: true\r\n    });\r\n    this.vGrid.element.dispatchEvent(event);\r\n\r\n    this.dragEl.classList.remove('ghost');\r\n    this.rootEl.removeEventListener('dragover', this.onDragOverX, false);\r\n    this.rootEl.removeEventListener('dragend', this.onDragEndX, false);\r\n    this.sortable = false;\r\n  }\r\n\r\n\r\n}\r\n"]}