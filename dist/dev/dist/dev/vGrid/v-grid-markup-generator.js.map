{"version":3,"sources":["vGrid/v-grid-markup-generator.js"],"names":["VGridMarkupGenerator","vGrid","getAttribute","value","capitalize","returnValue","replace","newValue","done","x","length","letter","charAt","toUpperCase","slice","generate","columnsToUse","type","vGridColumns","vGridConfig","colConfig","Error","columnLength","processColumns","array","forEach","col","index","colField","colRowTemplate","colType","colFilterTop","colHeaderName","colWidth","colCss","checkAttribute","createHeaderTemplate","createRowTemplate","colHeaderTemplate","inputHeader","labelHeader","attManualSelection","colFilter","createLabelMarkup","createInputHeaderMarkup","createImageRowMarkup","createInputRowMarkup","attribute","indexOf","classNames","attributeRow","colAddRowAttributes","css","imageFix","attOnlyCustom","colClass","attributeObserver","markup","filter","colAddFilterAttributes","filterClass","dragDropClass","attSortableHeader","classname","colAddLabelAttributes","sort","colSort","extraAttributes"],"mappings":";;;;;;;;;;;;;;;;sCAMaA,oB;AAEX,sCAAYC,KAAZ,EAAmB;AAAA;;AAAA,eAgJnBC,YAhJmB,GAgJJ,UAAUC,KAAV,EAAiBC,UAAjB,EAA6B;;AAE1C,gBAAIC,cAAcF,SAAS,UAA3B;;AAEA,gBAAIA,KAAJ,EAAW;AAGTA,sBAAQA,MAAMG,OAAN,CAAc,SAAd,EAAyB,EAAzB,CAAR;AACAH,sBAAQA,MAAMG,OAAN,CAAc,UAAd,EAA0B,EAA1B,CAAR;;AAGA,kBAAIC,WAAW,EAAf;AACA,kBAAIC,OAAO,KAAX;AACA,mBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIN,MAAMO,MAA1B,EAAkCD,GAAlC,EAAuC;AACrC,oBAAIE,SAASR,MAAMS,MAAN,CAAaH,CAAb,CAAb;;AAGA,oBAAI,CAACD,IAAD,IAASG,WAAW,GAApB,IAA2BA,WAAW,GAAtC,IAA6CA,WAAW,GAAxD,IAA+DA,WAAW,GAA9E,EAAmF;AACjFJ,6BAAWA,WAAWI,MAAtB;AACD,iBAFD,MAEO;AACLH,yBAAO,IAAP;AACD;AACF;;AAGD,kBAAIJ,UAAJ,EAAgB;AACdC,8BAAcE,SAASK,MAAT,CAAgB,CAAhB,EAAmBC,WAAnB,KAAmCN,SAASO,KAAT,CAAe,CAAf,CAAjD;AACD,eAFD,MAEO;AACLT,8BAAcE,QAAd;AACD;AAEF;;AAED,mBAAOF,WAAP;AACD,WAlLkB;;AACjB,eAAKJ,KAAL,GAAaA,KAAb;AACD;;uCAMDc,Q,uBAAW;AACT,cAAIC,eAAe,EAAnB;AACA,cAAIC,OAAO,IAAX;;AAEA,cAAI,KAAKhB,KAAL,CAAWiB,YAAX,IAA2B,KAAKjB,KAAL,CAAWiB,YAAX,CAAwBR,MAAxB,GAAiC,CAAhE,EAAmE;AACjEM,2BAAe,KAAKf,KAAL,CAAWiB,YAA1B;AACAD,mBAAO,WAAP;AACD;;AAED,cAAI,KAAKhB,KAAL,CAAWkB,WAAX,CAAuBC,SAAvB,IAAoC,KAAKnB,KAAL,CAAWkB,WAAX,CAAuBC,SAAvB,CAAiCV,MAAjC,GAA0C,CAAlF,EAAqF;AACnFM,2BAAe,KAAKI,SAApB;AACAH,mBAAO,UAAP;AACD;;AAED,cAAI,CAACA,IAAL,EAAW;AACT,kBAAM,IAAII,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,cAAIJ,SAAS,WAAb,EAA0B;AACxB,iBAAKhB,KAAL,CAAWkB,WAAX,CAAuBC,SAAvB,GAAmC,KAAKnB,KAAL,CAAWiB,YAA9C;AACA,iBAAKjB,KAAL,CAAWkB,WAAX,CAAuBG,YAAvB,GAAsC,KAAKrB,KAAL,CAAWiB,YAAX,CAAwBR,MAA9D;AACD;AACD,eAAKa,cAAL,CAAoB,KAAKtB,KAAL,CAAWkB,WAAX,CAAuBC,SAA3C;AAGD,S;;uCAMDG,c,2BAAeC,K,EAAO;AAAA;;AAEpBA,gBAAMC,OAAN,CAAc,UAACC,GAAD,EAAMC,KAAN,EAAe;AAG3B,gBAAI,CAACD,IAAIE,QAAL,IAAiB,CAACF,IAAIG,cAA1B,EAA0C;AACxC,kBAAGH,IAAII,OAAJ,KAAgB,WAAnB,EAA+B;AAC7B,sBAAM,IAAIT,KAAJ,CAAU,+BAAV,EAA2CM,KAA3C,CAAN;AACD;AACF;;AAGDD,gBAAII,OAAJ,GAAcJ,IAAII,OAAJ,IAAe,MAA7B;AACAJ,gBAAIK,YAAJ,GAAmBL,IAAIK,YAAJ,IAAoB,KAAvC;AACAL,gBAAIM,aAAJ,GAAoBN,IAAIM,aAAJ,IAAqB,MAAK9B,YAAL,CAAkBwB,IAAIE,QAAtB,EAAgC,IAAhC,CAAzC;AACAF,gBAAIO,QAAJ,GAAeP,IAAIO,QAAJ,IAAgB,GAA/B;AACAP,gBAAIQ,MAAJ,GAAaR,IAAIQ,MAAJ,IAAc,EAA3B;AACAR,gBAAIE,QAAJ,GAAe,MAAKO,cAAL,CAAoBT,IAAIE,QAAxB,CAAf;;AAGA,kBAAKQ,oBAAL,CAA0BV,GAA1B;AACA,kBAAKW,iBAAL,CAAuBX,GAAvB;AAGD,WAtBD;AAuBD,S;;uCAMDU,oB,iCAAqBV,G,EAAK;AAGxB,cAAI,CAACA,IAAIY,iBAAT,EAA4B;AAC1B,gBAAIC,oBAAJ;AACA,gBAAIC,oBAAJ;AACA,oBAAQd,IAAII,OAAZ;;AAEE,mBAAK,WAAL;AAEE,qBAAK7B,KAAL,CAAWkB,WAAX,CAAuBsB,kBAAvB,GAA4C,IAA5C;;AAEAD,8BAAc,EAAd;AACAD;AACA;;AAEF,mBAAK,OAAL;AACEA,8BAAc,iCAAd;AACA,oBAAI,CAACb,IAAIK,YAAT,EAAuB;AACrBL,sBAAIgB,SAAJ,GAAgB,GAAhB;AACD;AACDF,8BAAc,KAAKG,iBAAL,CAAuBjB,GAAvB,CAAd;AACA;;AAEF;AACEa,8BAAc,KAAKK,uBAAL,CAA6BlB,GAA7B,CAAd;AACAc,8BAAc,KAAKG,iBAAL,CAAuBjB,GAAvB,CAAd;AACA;;AArBJ;;AA0BA,gBAAIA,IAAIK,YAAR,EAAsB;AACpBL,kBAAIY,iBAAJ,GAAwBC,cAAcC,WAAtC;AACD,aAFD,MAEO;AACLd,kBAAIY,iBAAJ,GAAwBE,cAAcD,WAAtC;AACD;AACF;AACF,S;;uCAMDF,iB,8BAAkBX,G,EAAK;AAGrB,cAAI,CAACA,IAAIG,cAAT,EAAyB;;AAEvB,oBAAQH,IAAII,OAAZ;;AAEE,mBAAK,WAAL;AAEE,qBAAK7B,KAAL,CAAWkB,WAAX,CAAuBsB,kBAAvB,GAA4C,IAA5C;;AAEAf,oBAAIG,cAAJ;AACA;;AAEF,mBAAK,OAAL;AACE,qBAAKgB,oBAAL,CAA0BnB,GAA1B;AACA;;AAEF;AACE,qBAAKoB,oBAAL,CAA0BpB,GAA1B;AACA;;AAfJ;AAkBD;AACF,S;;uCA8CDS,c,2BAAeY,S,EAAW;AACxB,cAAI5C,QAAQ4C,SAAZ;AACA,cAAIA,SAAJ,EAAe;AACb,gBAAIA,UAAUC,OAAV,CAAkB,QAAlB,MAAgC,CAAC,CAAjC,IAAsCD,UAAUC,OAAV,CAAkB,SAAlB,MAAiC,CAAC,CAA5E,EAA+E;AAC7E7C,sBAAQ,YAAY4C,SAApB;AACD;AACF;AACD,iBAAO5C,KAAP;AACD,S;;uCAMD0C,oB,iCAAqBnB,G,EAAK;AAGxB,cAAIuB,aAAa,2BAAjB;AACA,cAAIC,eAAexB,IAAIyB,mBAAJ,GAA0BzB,IAAIyB,mBAA9B,GAAoD,EAAvE;AACA,cAAIC,MAAM1B,IAAIQ,MAAJ,aAAqBR,IAAIQ,MAAzB,SAAqC,EAA/C;;AAEA,cAAImB,WAAW,aAAf;AACA,cAAG,KAAKpD,KAAL,CAAWkB,WAAX,CAAuBmC,aAA1B,EAAwC;AACtCD,uBAAW,EAAX;AACD;;AAID3B,cAAIG,cAAJ,eAA+BuB,GAA/B,SAAsCH,UAAtC,SAAoDI,QAApD,SAAgEH,YAAhE,mBAA0FxB,IAAIE,QAA9F;AAED,S;;uCAMDkB,oB,iCAAqBpB,G,EAAK;AAGxB,cAAI6B,wBAAqB7B,IAAII,OAAJ,KAAgB,UAAhB,GAA6B,wBAA7B,GAAwD,iBAA7E,OAAJ;;AAGA,cAAIA,qBAAmBJ,IAAII,OAAvB,MAAJ;;AAGA,cAAIqB,sBAAsBzB,IAAIyB,mBAAJ,GAA0BzB,IAAIyB,mBAA9B,GAAoD,EAA9E;;AAGA,cAAIjB,SAASR,IAAIQ,MAAJ,aAAqBR,IAAIQ,MAAzB,SAAqC,EAAlD;;AAGA,cAAIsB,0CAAwC,KAAKtD,YAAL,CAAkBwB,IAAIE,QAAtB,CAAxC,MAAJ;AACA,cAAG,KAAK3B,KAAL,CAAWkB,WAAX,CAAuBmC,aAA1B,EAAwC;AACtCE,gCAAoB,EAApB;AACD;;AAID,cAAI9B,IAAII,OAAJ,KAAgB,UAApB,EAAgC;AAC9BJ,gBAAIG,cAAJ,eAA+B2B,iBAA/B,SAAoDtB,MAApD,SAA8DqB,QAA9D,SAA0EzB,OAA1E,SAAqFqB,mBAArF,wBAA2HzB,IAAIE,QAA/H;AACD,WAFD,MAEO;AACLF,gBAAIG,cAAJ,eAA+B2B,iBAA/B,SAAoDtB,MAApD,SAA8DqB,QAA9D,SAA0EzB,OAA1E,SAAqFqB,mBAArF,sBAAyHzB,IAAIE,QAA7H;AACD;AAEF,S;;uCAMDgB,uB,oCAAwBlB,G,EAAK;AAG3B,cAAI+B,eAAJ;AACA,cAAI/B,IAAIgB,SAAR,EAAmB;AAGjB,gBAAIzB,kBAAgBS,IAAII,OAApB,MAAJ;;AAGA,gBAAI4B,SAAShC,IAAIgB,SAAJ,kBAA6BhB,IAAIgB,SAAjC,SAAgD,EAA7D;;AAGA,gBAAIiB,yBAAyBjC,IAAIiC,sBAAJ,GAA6BjC,IAAIiC,sBAAjC,GAA0D,EAAvF;;AAGA,gBAAIV,aAAa,EAAjB;AACA,gBAAIvB,IAAII,OAAJ,KAAgB,UAApB,EAAgC;AAC9BmB,wCAAuBvB,IAAIK,YAAJ,GAAmB,uBAAnB,GAA6C,uBAApE;AACD,aAFD,MAEO;AACLkB,wCAAuBvB,IAAIK,YAAJ,GAAmB,wBAAnB,GAA8C,2BAArE;AACD;;AAGD0B,kCAAoBR,UAApB,SAAkCU,sBAAlC,SAA4D1C,IAA5D,SAAoEyC,MAApE;AACD,WArBD,MAqBO;AACLD,qBAAS,EAAT;AACD;;AAGD,iBAAOA,MAAP;AAED,S;;uCAMDd,iB,8BAAkBjB,G,EAAK;AAErB,cAAIkC,cAAclC,IAAIgB,SAAJ,SAAmBhB,IAAIK,YAAJ,GAAmB,oBAAnB,GAA0C,iBAA7D,IAAmF,kBAArG;;AAEA,cAAI8B,gBAAgB,KAAK5D,KAAL,CAAWkB,WAAX,CAAuB2C,iBAAvB,GAA2C,uBAA3C,GAAqE,EAAzF;;AAEA,cAAIC,wBAAsBF,aAAtB,SAAuCD,WAAvC,MAAJ;;AAEA,cAAII,wBAAwBtC,IAAIsC,qBAAJ,GAA4BtC,IAAIsC,qBAAhC,GAAwD,EAApF;;AAEA,cAAIC,OAAOvC,IAAIwC,OAAJ,gBAAyBxC,IAAIwC,OAA7B,SAA0C,EAArD;;AAGA,cAAIC,kBAAkB,8BAAtB;AACA,cAAG,KAAKlE,KAAL,CAAWkB,WAAX,CAAuBmC,aAA1B,EAAwC;AACtCa,8BAAkB,EAAlB;AACD;;AAID,cAAIV,iBAAeU,eAAf,SAAkCJ,SAAlC,SAA+CE,IAA/C,SAAuDD,qBAAvD,SAAgFtC,IAAIM,aAApF,SAAJ;;AAEA,iBAAOyB,MAAP;AACD,S","file":"vGrid/v-grid-markup-generator.js","sourceRoot":"/source/","sourcesContent":["/*****************************************************************************************************************\r\n *    VGridMarkupGenerator\r\n *    This generates all html strings needed for row/headers templates when needed\r\n *    Created by vegar ringdal\r\n *\r\n ****************************************************************************************************************/\r\nexport class VGridMarkupGenerator {\r\n\r\n  constructor(vGrid) {\r\n    this.vGrid = vGrid;\r\n  }\r\n\r\n\r\n  /********************************************************************\r\n   * checks the column configs and calls method to process them\r\n   ********************************************************************/\r\n  generate() {\r\n    let columnsToUse = [];\r\n    let type = null;\r\n\r\n    if (this.vGrid.vGridColumns && this.vGrid.vGridColumns.length > 0) {\r\n      columnsToUse = this.vGrid.vGridColumns;\r\n      type = 'typeArray'\r\n    }\r\n\r\n    if (this.vGrid.vGridConfig.colConfig && this.vGrid.vGridConfig.colConfig.length > 0) {\r\n      columnsToUse = this.colConfig;\r\n      type = 'typeHtml'\r\n    }\r\n\r\n    if (!type) {\r\n      throw new Error('column setup missing');\r\n    }\r\n\r\n    if (type === 'typeArray') {\r\n      this.vGrid.vGridConfig.colConfig = this.vGrid.vGridColumns;\r\n      this.vGrid.vGridConfig.columnLength = this.vGrid.vGridColumns.length;\r\n    }\r\n    this.processColumns(this.vGrid.vGridConfig.colConfig);\r\n\r\n\r\n  }\r\n\r\n\r\n  /********************************************************************\r\n   * loops the column and starts calling functions to generaate the markup\r\n   ********************************************************************/\r\n  processColumns(array) {\r\n\r\n    array.forEach((col, index)=> {\r\n\r\n      //we need attribute or rowtemplate, else throm error\r\n      if (!col.colField && !col.colRowTemplate) {\r\n        if(col.colType !== \"selection\"){\r\n          throw new Error('colField is not set on column', index);\r\n        }\r\n      }\r\n\r\n      //set default, some can be missing\r\n      col.colType = col.colType || \"text\";\r\n      col.colFilterTop = col.colFilterTop || false;\r\n      col.colHeaderName = col.colHeaderName || this.getAttribute(col.colField, true);\r\n      col.colWidth = col.colWidth || 100;\r\n      col.colCss = col.colCss || '';\r\n      col.colField = this.checkAttribute(col.colField);\r\n\r\n      //create row and header templates\r\n      this.createHeaderTemplate(col);\r\n      this.createRowTemplate(col);\r\n\r\n\r\n    });\r\n  }\r\n\r\n\r\n  /********************************************************************\r\n   * generates and sets the header template\r\n   ********************************************************************/\r\n  createHeaderTemplate(col) {\r\n\r\n    //if header template does not exist then lets create it\r\n    if (!col.colHeaderTemplate) {\r\n      let inputHeader;\r\n      let labelHeader;\r\n      switch (col.colType) {\r\n\r\n        case \"selection\":\r\n          //override to manual selection\r\n          this.vGrid.vGridConfig.attManualSelection = true;\r\n          //set template\r\n          labelHeader = '';\r\n          inputHeader = `<input class=\"vgrid-row-checkbox-100\" v-selection=\"header\" type=\"checkbox\">`;\r\n          break;\r\n\r\n        case \"image\":\r\n          inputHeader = '<p class=\"vgrid-label-top\"></p>';\r\n          if (!col.colFilterTop) {\r\n            col.colFilter = \"x\"\r\n          }\r\n          labelHeader = this.createLabelMarkup(col);\r\n          break;\r\n\r\n        default://text\r\n          inputHeader = this.createInputHeaderMarkup(col);\r\n          labelHeader = this.createLabelMarkup(col);\r\n          break;\r\n\r\n      }\r\n\r\n      //set correctly to where is is suppoed to be\r\n      if (col.colFilterTop) {\r\n        col.colHeaderTemplate = inputHeader + labelHeader;\r\n      } else {\r\n        col.colHeaderTemplate = labelHeader + inputHeader;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /********************************************************************\r\n   * generates and sets the row template\r\n   ********************************************************************/\r\n  createRowTemplate(col) {\r\n\r\n    //if row template does not exist, then lets create it\r\n    if (!col.colRowTemplate) {\r\n\r\n      switch (col.colType) {\r\n\r\n        case \"selection\":\r\n          //override to manual selection\r\n          this.vGrid.vGridConfig.attManualSelection = true;\r\n          //set template\r\n          col.colRowTemplate = `<input v-key-move class=\"vgrid-row-checkbox-100\"  v-selection=\"row\" type=\"checkbox\" >`;\r\n          break;\r\n\r\n        case \"image\":\r\n          this.createImageRowMarkup(col);\r\n          break;\r\n\r\n        default://text\r\n          this.createInputRowMarkup(col);\r\n          break;\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /********************************************************************\r\n   * simple way to get get attribute, this can prb be done better...\r\n   ********************************************************************/\r\n  getAttribute = function (value, capitalize) {\r\n\r\n    let returnValue = value || \"missing!\";\r\n\r\n    if (value) {\r\n\r\n      //remove rowRef/tempRef\r\n      value = value.replace('rowRef.', '');\r\n      value = value.replace('tempRef.', '');\r\n\r\n      //loop it until we have the attribute\r\n      let newValue = \"\";\r\n      let done = false;\r\n      for (var x = 0; x < value.length; x++) {\r\n        let letter = value.charAt(x);\r\n\r\n        //if we hit & or | or space we are at the end\r\n        if (!done && letter !== \" \" && letter !== \"&\" && letter !== \"|\" && letter !== \":\") {\r\n          newValue = newValue + letter;\r\n        } else {\r\n          done = true;\r\n        }\r\n      }\r\n\r\n      //capilize first letter\r\n      if (capitalize) {\r\n        returnValue = newValue.charAt(0).toUpperCase() + newValue.slice(1);\r\n      } else {\r\n        returnValue = newValue;\r\n      }\r\n\r\n    }\r\n\r\n    return returnValue;\r\n  };\r\n\r\n\r\n  /********************************************************************\r\n   *adds rowRef if temp/rowRef isnt set, have this so user dont haveto write it to make it work\r\n   ********************************************************************/\r\n  checkAttribute(attribute) {\r\n    let value = attribute;\r\n    if (attribute) {\r\n      if (attribute.indexOf(\"rowRef\") === -1 && attribute.indexOf(\"tempRef\") === -1) {\r\n        value = \"rowRef.\" + attribute;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n\r\n\r\n  /********************************************************************\r\n   * create image row markup\r\n   ********************************************************************/\r\n  createImageRowMarkup(col) {\r\n\r\n    //get the values/settings\r\n    let classNames = 'class=\"vgrid-image-round\"';\r\n    let attributeRow = col.colAddRowAttributes ? col.colAddRowAttributes : '';\r\n    let css = col.colCss ? `css=\"${col.colCss}\"` : '';\r\n\r\n    let imageFix = \"v-image-fix\";\r\n    if(this.vGrid.vGridConfig.attOnlyCustom){\r\n      imageFix = \"\";\r\n    }\r\n\r\n\r\n    //insert the markup\r\n    col.colRowTemplate = `<image ${css} ${classNames} ${imageFix} ${attributeRow} src.bind=\"${col.colField}\">`;\r\n\r\n  }\r\n\r\n\r\n  /********************************************************************\r\n   * create text/checkbox row markup\r\n   ********************************************************************/\r\n  createInputRowMarkup(col) {\r\n\r\n    //get the values/settings\r\n    let colClass = `class=\"${col.colType === \"checkbox\" ? 'vgrid-row-checkbox-100' : 'vgrid-row-input'}\"`;\r\n\r\n    //type\r\n    let colType = `type=\"${col.colType}\"`;\r\n\r\n    //get attributes row\r\n    let colAddRowAttributes = col.colAddRowAttributes ? col.colAddRowAttributes : '';\r\n\r\n    //get css\r\n    let colCss = col.colCss ? `css=\"${col.colCss}\"` : '';\r\n\r\n    //attibute observer for 2 way flow between row and current entity\r\n    let attributeObserver = `v-observe-field=\"${this.getAttribute(col.colField)}\"`;\r\n    if(this.vGrid.vGridConfig.attOnlyCustom){\r\n      attributeObserver = \"\";\r\n    }\r\n\r\n    //is it a checkbox?\r\n    //todo: adding the observer part without choice, maybe param for that?\r\n    if (col.colType === \"checkbox\") {\r\n      col.colRowTemplate = `<input ${attributeObserver} ${colCss} ${colClass} ${colType} ${colAddRowAttributes}  checked.bind=\"${col.colField}\">`;\r\n    } else {\r\n      col.colRowTemplate = `<input ${attributeObserver} ${colCss} ${colClass} ${colType} ${colAddRowAttributes}  value.bind=\"${col.colField}\">`;\r\n    }\r\n\r\n  }\r\n\r\n\r\n  /********************************************************************\r\n   * create header filter markup\r\n   ********************************************************************/\r\n  createInputHeaderMarkup(col) {\r\n\r\n    //is it filter ?\r\n    let markup;\r\n    if (col.colFilter) {\r\n\r\n      //type\r\n      let type = `type=\"${col.colType}\"`;\r\n\r\n      //filter\r\n      let filter = col.colFilter ? `v-filter=\"${col.colFilter}\"` : '';\r\n\r\n      //get attributes label\r\n      let colAddFilterAttributes = col.colAddFilterAttributes ? col.colAddFilterAttributes : '';\r\n\r\n      //is it a checkbox ?\r\n      let classNames = '';\r\n      if (col.colType === \"checkbox\") {\r\n        classNames = `class=\"${col.colFilterTop ? 'vgrid-row-checkbox-50' : 'vgrid-row-checkbox-50'}\"`;\r\n      } else {\r\n        classNames = `class=\"${col.colFilterTop ? 'vgrid-header-input-top' : 'vgrid-header-input-bottom'}\"`;\r\n      }\r\n\r\n      //apply magic\r\n      markup = `<input  ${classNames} ${colAddFilterAttributes} ${type} ${filter}\">`;\r\n    } else {\r\n      markup = '';\r\n    }\r\n\r\n    //return the markup\r\n    return markup;\r\n\r\n  }\r\n\r\n\r\n  /********************************************************************\r\n   * create label markup\r\n   ********************************************************************/\r\n  createLabelMarkup(col) {\r\n    //get the values/settings\r\n    let filterClass = col.colFilter ? `${col.colFilterTop ? 'vgrid-label-bottom' : 'vgrid-label-top'}` : 'vgrid-label-full';\r\n\r\n    let dragDropClass = this.vGrid.vGridConfig.attSortableHeader ? 'vGrid-vGridDragHandle' : '';\r\n\r\n    let classname = `class=\"${dragDropClass} ${filterClass}\"`;\r\n\r\n    let colAddLabelAttributes = col.colAddLabelAttributes ? col.colAddLabelAttributes : '';\r\n\r\n    let sort = col.colSort ? `v-sort=\"${col.colSort}\"` : '';\r\n\r\n\r\n    let extraAttributes = \"v-drag-drop-col v-resize-col\";\r\n    if(this.vGrid.vGridConfig.attOnlyCustom){\r\n      extraAttributes = \"\";\r\n    }\r\n\r\n    //apply magic\r\n    //todo, atm Im adding resize columns and dragdrop columns, should this be a choice?\r\n    let markup = `<p ${extraAttributes} ${classname} ${sort} ${colAddLabelAttributes}>${col.colHeaderName}</p>`;\r\n    //return the markup\r\n    return markup;\r\n  }\r\n\r\n\r\n}\r\n"]}