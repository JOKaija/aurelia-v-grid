{"version":3,"sources":["vGrid/v-grid-config.js"],"names":["VGridConfig","vGrid","css","wrapper","row","mainHeader","mainContent","mainFooter","scrollBody","rowColumn","rowHeaderColumn","rowHeader","rowSelected","rowContainer","rowAlt","rowEven","dragHandle","resizeHeaderDragHandle","sortIcon","sortIconSort","sortIconAsc","sortIconDesc","sortIconNo","atts","dataAttribute","dataAttributeFilter","onFilterRun","filterObj","length","vGridCollectionFiltered","vGridCollection","eventOnRemoteCall","attLoadingThreshold","loading","setTimeout","curKey","vGridCurrentEntityRef","vGridRowKey","vGridFilter","lastFilter","remoteOffset","remoteCall","run","vGridSort","newRowNo","forEach","x","index","vGridCurrentEntity","vGridCurrentRow","vGridGenerator","collectionChange","colConfig","columnLength","attAttributeObserve","attRowHeight","attHeaderHeight","attFooterHeight","attResizableHeaders","attMultiSelect","undefined","attSortableHeader","attRemoteIndex","attManualSelection","eventOnRowDraw","eventOnRowClick","eventOnRowDblClick","attHidePagerInfo","attCustomPager","attLanguage","attOnlyCustom","repeater","repeatRowTemplate","attDataScrollDelay","attRequestAnimationFrame","attResizableHeadersAndRows","attRenderOnScrollbarScroll","keepFilterOnCollectionChange","remoteLimit","remoteLength","setValue","htmlAttributeValue","defaultValue","value","isNaN","setBindValueArray","toProperty","tempArray","split","prop","trim","setBindValueInt","parseInt","setBindValueString","setBindValueFunction","setBindValueBool","type","getRowProperties","obj","k","hasOwnProperty","data","filter","sort","getFilter","limit","offset","then","vGridObservables","disableObservablesArray","disableObservablesCollection","col","slice","checkKeys","vGridSelection","reset","vGridPager","updatePager","enableObservablesArray","enableObservablesCollection","getFilterName","name","getNameOfFilter","getDataElement","isDown","isLargeScroll","callback","tempRef","rowRef","onOrderBy","attribute","add","setFilter","asc","event","CustomEvent","detail","bubbles","element","dispatchEvent","getCollectionLength","clickHandler","raiseEvent","evt","vGridGetRowKey","updateRowBinding","rowNo","isDownScroll","entity","div","setAttribute","bindingContext","viewSlot","bind","parentOverrideContext","overrideContext","that","ctx","style","display","classList","contains","remove","isSelected"],"mappings":"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","file":"vGrid/v-grid-config.js","sourceRoot":"/source/","sourcesContent":["/*****************************************************************************************************************\r\n *    VGridConfig\r\n *    This generates the config used by vGridgenerator, other classes also calls this to get the information, also have misc utillity functions\r\n *    Created by vegar ringdal\r\n *\r\n ****************************************************************************************************************/\r\n\r\nexport class VGridConfig {\r\n\r\n\r\n  /***************************************************************************************\r\n   * CSS classes used by grid\r\n   ***************************************************************************************/\r\n  css = {\r\n    wrapper: \"vGrid\",\r\n    row: \"vGrid-row\",\r\n    mainHeader: \"vGrid-header\",\r\n    mainContent: \"vGrid-body\",\r\n    mainFooter: \"vGrid-footer\",\r\n    scrollBody: \"vGrid-body-scroll\",\r\n    rowColumn: \"vGrid-row-column\",\r\n    rowHeaderColumn: \"vGrid-row-column-header\",\r\n    rowHeader: \"vGrid-row-header\",\r\n    rowSelected: \"vGrid-row-selected\",\r\n    rowContainer: \"vGrid-row-container\",\r\n    rowAlt: \"vGrid-row-alt\",\r\n    rowEven: \"vGrid-row-even\",\r\n    dragHandle: \"vGrid-vGridDragHandle\",\r\n    resizeHeaderDragHandle: \"vGrid-draggable-handler\",\r\n    sortIcon: \"vGrid-glyphicon\",\r\n    sortIconSort: \"vGrid-glyphicon-sort\",\r\n    sortIconAsc: \"vGrid-glyphicon-sort-asc\",\r\n    sortIconDesc: \"vGrid-glyphicon-sort-desc\",\r\n    sortIconNo: \"vGrid-glyphicon\"\r\n  };\r\n\r\n\r\n  /***************************************************************************************\r\n   * different attributes used by grid\r\n   ***************************************************************************************/\r\n  atts = {\r\n    dataAttribute: \"v-grid-data-attribute\",\r\n    dataAttributeFilter: \"v-grid-data-attribute-filter\"\r\n  };\r\n\r\n\r\n  /***************************************************************************************\r\n   * default settings, v-grid-col.js and v-grid-atts populate these defaults with new values\r\n   ***************************************************************************************/\r\n  constructor(vGrid) {\r\n    this.vGrid = vGrid;\r\n\r\n    //<v-grid-col> attributes\r\n    this.colConfig = [];\r\n\r\n    //count of columns;\r\n    this.columnLength = 0;\r\n\r\n    //<v-grid> attibutes\r\n    this.attAttributeObserve = [];\r\n    this.attRowHeight = 50;\r\n    this.attHeaderHeight = 0;\r\n    this.attFooterHeight = 0;\r\n    this.attResizableHeaders = false;\r\n    this.attMultiSelect = undefined;\r\n    this.attSortableHeader = false;\r\n    this.attLoadingThreshold = -1; //for when loading screen comes on\r\n    this.attRemoteIndex = false;\r\n    this.attManualSelection = false;\r\n    this.eventOnRowDraw = null;\r\n    this.eventOnRowClick = null;\r\n    this.eventOnRowDblClick = null;\r\n    this.eventOnRemoteCall = null;\r\n    this.attHidePagerInfo = false;\r\n    this.attCustomPager = null;\r\n    this.attLanguage = {};\r\n    this.attOnlyCustom = false; //to stop markup generator for adding attributes when in simple and column config\r\n\r\n    //repeat html vars\r\n    this.repeater = false;\r\n    this.repeatRowTemplate = null;\r\n\r\n\r\n    //static atm (dunno if I want them as options yet)\r\n    this.attDataScrollDelay = 200;\r\n    this.attRequestAnimationFrame = true;\r\n    this.attResizableHeadersAndRows = true; //is just here if someone for some reson would like to just resize header, and fix rows after\r\n    this.attRenderOnScrollbarScroll = true;\r\n\r\n\r\n    //remote internal vars\r\n    this.keepFilterOnCollectionChange = false; //for keeping the sorticons like they are\r\n    this.remoteLimit = 40;\r\n    this.remoteLength = 0;\r\n    this.remoteOffset = 0;\r\n\r\n\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   *  utillity functions for setting attibutes default, and converting them\r\n   ***************************************************************************************/\r\n\r\n  setValue(htmlAttributeValue, defaultValue) {\r\n    var value = defaultValue;\r\n    if (htmlAttributeValue !== undefined && htmlAttributeValue !== null && !isNaN(htmlAttributeValue)) {\r\n      value = htmlAttributeValue;\r\n    }\r\n    return value;\r\n  }\r\n\r\n\r\n  setBindValueArray(value, toProperty) {\r\n    if (value !== undefined && value !== null) {\r\n      var tempArray = value.split(\",\");\r\n      tempArray.forEach((prop)=> {\r\n        prop = prop.trim();\r\n      });\r\n      this[toProperty] = tempArray;\r\n    }\r\n  }\r\n\r\n\r\n  setBindValueInt(value, toProperty) {\r\n    this[toProperty] = this.setValue(parseInt(value), this[toProperty]);\r\n  }\r\n\r\n  \r\n  setBindValueString(value, toProperty) {\r\n    if (typeof(value) === \"string\" && value !== '' && value !== undefined && value !== null) {\r\n      if(toProperty === \"attRemoteIndex\"){\r\n        //this one is special, for tracking remote\r\n        this[toProperty] = true;\r\n        this.vGrid.vGridRowKey = value;\r\n      } else {\r\n        this[toProperty] = value;\r\n      }\r\n\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  setBindValueFunction(value, toProperty) {\r\n    if (typeof(value) === \"function\") {\r\n      this[toProperty] = value;\r\n    }\r\n  }\r\n\r\n\r\n  setBindValueBool(value, toProperty) {\r\n    let type = {\r\n      \"true\": true,\r\n      \"false\": false\r\n    };\r\n    this[toProperty] = this.setValue(type[value], this[toProperty]);\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * loops current rowRef and create tempRef that gets sent to onRowDraw\r\n   ***************************************************************************************/\r\n  getRowProperties(obj) {\r\n    if (obj) {\r\n      var x = {};\r\n      for (var k in obj) {\r\n        if (obj.hasOwnProperty(k)) {\r\n          if (x[k] !== obj[k]) {\r\n            x[k] = obj[k];\r\n          }\r\n        }\r\n      }\r\n      return x;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * calls remote function\r\n   ***************************************************************************************/\r\n  remoteCall(data) {\r\n    data = data ? data : {};\r\n    this.eventOnRemoteCall({\r\n      filter: data.filter || this.vGrid.vGridFilter.lastFilter,\r\n      sort: data.sort || this.vGrid.vGridSort.getFilter(),\r\n      limit: data.limit || this.remoteLimit,\r\n      offset: data.offset || this.remoteOffset\r\n    })\r\n      .then((data)=> {\r\n\r\n        this.vGrid.vGridObservables.disableObservablesArray();\r\n        this.vGrid.vGridObservables.disableObservablesCollection();\r\n        this.vGrid.vGridCollection = data.col;\r\n        this.remoteLimit = data.limit;\r\n        this.remoteLength = data.length;\r\n        this.vGrid.vGridCollectionFiltered = this.vGrid.vGridCollection.slice(0);\r\n        this.vGrid.checkKeys();\r\n        this.vGrid.vGridCurrentRow = -1;\r\n        if (!this.attRemoteIndex) {\r\n          this.vGrid.vGridSelection.reset();\r\n        }\r\n        this.vGrid.vGridGenerator.collectionChange();\r\n        this.vGrid.loading = false;\r\n        this.vGrid.vGridPager.updatePager({\r\n          limit: this.remoteLimit,\r\n          offset: this.remoteOffset,\r\n          length: this.remoteLength\r\n        });\r\n        setTimeout(()=> {\r\n          this.vGrid.vGridObservables.enableObservablesArray();\r\n          this.vGrid.vGridObservables.enableObservablesCollection();\r\n        }, 200);\r\n      });\r\n\r\n\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * This is called when grid runs filter\r\n   ***************************************************************************************/\r\n  onFilterRun = (filterObj) => {\r\n\r\n    if (filterObj.length !== 0 || this.vGrid.vGridCollectionFiltered.length !== this.vGrid.vGridCollection.length || this.eventOnRemoteCall) {\r\n\r\n      //set loading screen\r\n      if (this.vGrid.vGridCollection.length > this.attLoadingThreshold) {\r\n        this.vGrid.loading = true;\r\n      }\r\n\r\n      //run query\r\n      setTimeout(()=> {\r\n        //get current key if there is any, need this to find current row after filter\r\n        var curKey = -1;\r\n        if (this.vGrid.vGridCurrentEntityRef) {\r\n          curKey = this.vGrid.vGridCurrentEntityRef[this.vGrid.vGridRowKey];\r\n        }\r\n\r\n\r\n        //if remotecall is set then lets use that\r\n        if (this.eventOnRemoteCall) {\r\n\r\n          //set last filter they just set\r\n          this.vGrid.vGridFilter.lastFilter = filterObj;\r\n\r\n          //on filter we need to set offset to 0\r\n          this.remoteOffset = 0;\r\n\r\n          //trigger remote call\r\n          this.remoteCall();\r\n\r\n        } else {\r\n\r\n\r\n          //run filter\r\n          this.vGrid.vGridCollectionFiltered = this.vGrid.vGridFilter.run(this.vGrid.vGridCollection, filterObj);\r\n\r\n\r\n          //run sorting\r\n          this.vGrid.vGridSort.run(this.vGrid.vGridCollectionFiltered);\r\n\r\n\r\n          //set current row/entity in sync\r\n          var newRowNo = -1;\r\n          if (curKey) {\r\n            this.vGrid.vGridCollectionFiltered.forEach((x, index) => {\r\n              if (curKey === x[this.vGrid.vGridRowKey]) {\r\n                newRowNo = index;\r\n              }\r\n            });\r\n          }\r\n\r\n\r\n          //update current row/current entity/entity ref\r\n          if (newRowNo > -1) {\r\n            this.vGrid.vGridCurrentEntityRef = this.vGrid.vGridCollectionFiltered[newRowNo];\r\n            this.vGrid.vGridCurrentEntity[this.vGrid.vGridRowKey] = this.vGrid.vGridCurrentEntityRef[this.vGrid.vGridRowKey];\r\n            this.vGrid.vGridCurrentRow = newRowNo;\r\n          } else {\r\n            this.vGrid.vGridCurrentRow = newRowNo;\r\n          }\r\n\r\n\r\n          //update grid rows\r\n          this.vGrid.vGridGenerator.collectionChange(true);\r\n          this.vGrid.loading = false;\r\n        }\r\n\r\n      }, 50);\r\n\r\n    }\r\n\r\n\r\n  };\r\n\r\n\r\n  /***************************************************************************************\r\n   * grid asks for the filter name from attibute\r\n   ***************************************************************************************/\r\n  getFilterName(name) {\r\n    return this.vGrid.vGridFilter.getNameOfFilter(name)\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * This just sets data from array,\r\n   * Use {} if you want markup of columns, or undefined for total blank rows\r\n   ***************************************************************************************/\r\n  getDataElement(row, isDown, isLargeScroll, callback) {\r\n    if (this.vGrid.vGridCollectionFiltered !== undefined) {\r\n      if (this.eventOnRowDraw) {\r\n        //if user have added this then we call it so they can edit the row data before we display it\r\n        var data = this.getRowProperties(this.vGrid.vGridCollectionFiltered[row]);\r\n        this.eventOnRowDraw({\r\n            tempRef: data || null,\r\n            rowRef: this.vGrid.vGridCollectionFiltered[row] || null\r\n          }\r\n        );\r\n        callback(data)\r\n      } else {\r\n        callback(this.vGrid.vGridCollectionFiltered[row]);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * This calls the order by function\r\n   * Use {} if you want markup of columns, or undefined for total blank rows\r\n   ***************************************************************************************/\r\n  onOrderBy(attribute, add) {\r\n\r\n\r\n\r\n\r\n    //can we do the sorting?\r\n    if (this.vGrid.vGridCollectionFiltered.length > 0) {\r\n      //set loading screen\r\n      if (this.vGrid.vGridCollection.length > this.attLoadingThreshold) {\r\n        this.vGrid.loading = true;\r\n      }\r\n\r\n      //set query\r\n      setTimeout(()=> {\r\n        //set filter\r\n        this.vGrid.vGridSort.setFilter({\r\n          attribute: attribute,\r\n          asc: true\r\n        }, add);\r\n\r\n\r\n        let event = new CustomEvent(\"sortIconUpdate\", {\r\n          detail: \"\",\r\n          bubbles: true\r\n        });\r\n        this.vGrid.element.dispatchEvent(event);\r\n\r\n\r\n        //if remote call is set\r\n        if (this.eventOnRemoteCall) {\r\n\r\n          //trigger remote call\r\n          this.remoteCall();\r\n\r\n        } else {\r\n          //run filter\r\n          this.vGrid.vGridSort.run(this.vGrid.vGridCollectionFiltered);\r\n\r\n\r\n          //set new row\r\n          if (this.vGrid.vGridCurrentEntityRef) {\r\n            this.vGrid.vGridCollectionFiltered.forEach((x, index) => {\r\n              if (this.vGrid.vGridCurrentEntityRef[this.vGrid.vGridRowKey] === x[this.vGrid.vGridRowKey]) {\r\n                this.vGrid.vGridCurrentRow = index;\r\n              }\r\n            });\r\n          }\r\n\r\n\r\n          //update grid\r\n          this.vGrid.vGridGenerator.collectionChange();\r\n          this.vGrid.loading = false;\r\n        }\r\n\r\n      }, 50);\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * Just for knowing length,\r\n   * Its this you will need to add for server source/paging with endless scrolling\r\n   ***************************************************************************************/\r\n  getCollectionLength() {\r\n    return this.vGrid.vGridCollectionFiltered.length;\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * Listen for click on rows(called from v-grid-generator eventlistner for the buffer rows it created)\r\n   * Snd set current entity, and also allow edit of cell\r\n   ***************************************************************************************/\r\n  clickHandler(event, row) {\r\n\r\n\r\n    //set current row of out filtered row\r\n    this.vGrid.vGridCurrentRow = row;\r\n\r\n\r\n    //get data ref\r\n    this.vGrid.vGridCurrentEntityRef = this.vGrid.vGridCollectionFiltered[row];\r\n\r\n\r\n    //loop properties and set them to current entity\r\n    let data = this.vGrid.vGridCurrentEntityRef;\r\n    for (var k in data) {\r\n      if (data.hasOwnProperty(k)) {\r\n        if (this.vGrid.vGridCurrentEntity[k] !== data[k]) {\r\n          this.vGrid.vGridCurrentEntity[k] = data[k];\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    //this dispatch events that v-grid-row-col.js picks up, for calling back is event for single on rows are set\r\n    if (event.type === \"click\") {\r\n      this.vGrid.raiseEvent(\"v-row-onclick\", {\r\n        evt: event,\r\n        data: this.vGrid.vGridCollectionFiltered[this.vGrid.vGridCurrentRow],\r\n        row: this.vGrid.vGridGetRowKey(this.vGrid.vGridCollectionFiltered[this.vGrid.vGridCurrentRow][this.vGrid.vGridRowKey])\r\n      });\r\n    }\r\n\r\n\r\n    //this dispatch events that v-grid-row-col.js picks up, for calling back is event for dblclick on rows are set\r\n    if (event.type === \"dblclick\") {\r\n      this.vGrid.raiseEvent(\"v-row-ondblclick\", {\r\n        evt: event,\r\n        data: this.vGrid.vGridCollectionFiltered[this.vGrid.vGridCurrentRow],\r\n        row: this.vGrid.vGridGetRowKey(this.vGrid.vGridCollectionFiltered[this.vGrid.vGridCurrentRow][this.vGrid.vGridRowKey])\r\n      });\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  /****************************************************************************************************************************\r\n   * calls user for element, user haveto use callback here, might also need to fetch data first..\r\n   ****************************************************************************************************************************/\r\n  updateRowBinding(rowNo, row, isDownScroll, isLargeScroll) {\r\n    //called when drawing row\r\n    //lets ask for our data, and insert it into row\r\n    this.getDataElement(rowNo, isDownScroll, isLargeScroll,\r\n      (entity) => {\r\n\r\n        row.div.setAttribute(\"row\", rowNo);\r\n\r\n        if (entity === \"\") {\r\n          let bindingContext = {};\r\n          row.viewSlot.bind(bindingContext, {\r\n            bindingContext: bindingContext,\r\n            parentOverrideContext: this.vGrid.overrideContext\r\n          });\r\n        }\r\n\r\n        if (entity !== \"\" && row.viewSlot !== null) {\r\n          let tempRef = {};\r\n          for (var k in entity) {\r\n            if (entity.hasOwnProperty(k)) {\r\n              if (tempRef[k] !== entity[k]) {\r\n                tempRef[k] = entity[k];\r\n              }\r\n            }\r\n          }\r\n          var that = this;\r\n          let bindingContext = {};\r\n          bindingContext.row = rowNo;\r\n          bindingContext.ctx = this;\r\n          bindingContext.tempRef = tempRef;\r\n          bindingContext.rowRef = this.vGrid.vGridCollectionFiltered[rowNo];\r\n          row.viewSlot.bind(bindingContext, {\r\n            bindingContext: bindingContext,\r\n            parentOverrideContext: this.vGrid.overrideContext\r\n          });\r\n        }\r\n\r\n        if (entity === undefined || entity === \"\" || entity === null) {\r\n          row.div.style.display = \"none\";\r\n        } else {\r\n          row.div.style.display = \"block\";\r\n        }\r\n\r\n        //add alt/even css\r\n        if (rowNo % 2 === 1) {\r\n          if (row.div.classList.contains(this.css.rowEven)) {\r\n            row.div.classList.remove(this.css.rowEven);\r\n            row.div.classList.add(this.css.rowAlt);\r\n          }\r\n\r\n        } else {\r\n          if (row.div.classList.contains(this.css.rowAlt)) {\r\n            row.div.classList.remove(this.css.rowAlt);\r\n            row.div.classList.add(this.css.rowEven);\r\n          }\r\n        }\r\n        //set highlight\r\n        if (this.vGrid.vGridSelection.isSelected(rowNo)) {\r\n          row.div.classList.add(this.css.rowSelected)\r\n        } else {\r\n          row.div.classList.remove(this.css.rowSelected)\r\n        }\r\n      });\r\n  };\r\n\r\n\r\n}\r\n"]}