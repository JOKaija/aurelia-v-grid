{"version":3,"sources":["vGrid/v-grid-attributes-observe-field.js"],"names":["inject","customAttribute","BindingEngine","VGrid","vGridAttributesObserveField","Element","element","vGrid","bindingEngine","timer","bind","bindingContext","overrideContext","propertyObserver","dispose","attribute","value","rowRef","vGridObservables","disableObservablesAttributes","attAttributeObserve","vGridConfig","indexOf","push","enableObservablesAttributes","subscribe","newValue","oldValue","newValueCheck","undefined","toString","oldValueCheck","vGridCurrentEntityRef","vGridCurrentEntity","unbind"],"mappings":";;;;;;;;;;;;;;;AAKQA,Y,qBAAAA,M;AAAQC,qB,qBAAAA,e;AAAiBC,mB,qBAAAA,a;;AACzBC,W,UAAAA,K;;;6CAKKC,2B,WAFZH,gBAAgB,iBAAhB,C,UACAD,OAAOK,OAAP,EAAgBF,KAAhB,EAAuBD,aAAvB,C;AAIC,6CAAYI,OAAZ,EAAqBC,KAArB,EAA4BC,aAA5B,EAA2C;AAAA;;AACzC,eAAKD,KAAL,GAAaA,KAAb;AACA,eAAKD,OAAL,GAAeA,OAAf;AACA,eAAKG,KAAL,GAAa,IAAb;AACA,eAAKD,aAAL,GAAqBA,aAArB;AACD;;8CAGDE,I,iBAAKC,c,EAAgBC,e,EAAiB;AAAA;;AACpC,eAAKD,cAAL,GAAsBA,cAAtB;AACA,eAAKC,eAAL,GAAuBA,eAAvB;;AAEA,cAAG,KAAKC,gBAAR,EAAyB;AACvB,iBAAKA,gBAAL,CAAsBC,OAAtB;AACA,iBAAKD,gBAAL,GAAwB,IAAxB;AACD;;AAED,cAAIE,YAAY,KAAKC,KAArB;;AAGA,cAAID,aAAa,KAAKJ,cAAL,CAAoBM,MAArC,EAA6C;AAG3C,iBAAKV,KAAL,CAAWW,gBAAX,CAA4BC,4BAA5B;;AAGA,gBAAIC,sBAAsB,KAAKb,KAAL,CAAWc,WAAX,CAAuBD,mBAAjD;AACA,gBAAIL,aAAY,KAAKC,KAArB;;AAEA,gBAAII,oBAAoBE,OAApB,CAA4BP,UAA5B,MAA2C,CAAC,CAA5C,IAAiDA,UAArD,EAAgE;AAC9DK,kCAAoBG,IAApB,CAAyBR,UAAzB;AACD;;AAED,iBAAKR,KAAL,CAAWW,gBAAX,CAA4BM,2BAA5B;;AAIA,iBAAKX,gBAAL,GAAwB,KAAKL,aAAL,CAAmBK,gBAAnB,CAAoC,KAAKF,cAAL,CAAoBM,MAAxD,EAAgE,KAAKD,KAArE,EAA4ES,SAA5E,CAAsF,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAGpI,kBAAIC,gBAAiBF,aAAaG,SAAb,IAA0BH,aAAa,IAAxC,GAAgDA,SAASI,QAAT,EAAhD,GAAsEJ,QAA1F;AACA,kBAAIK,gBAAiBJ,aAAaE,SAAb,IAA0BF,aAAa,IAAxC,GAAgDA,SAASG,QAAT,EAAhD,GAAsEH,QAA1F;;AAEA,kBAAIC,kBAAkBG,aAAlB,IAAmC,MAAKxB,KAAL,CAAWyB,qBAAlD,EAAyE;AACvE,sBAAKzB,KAAL,CAAW0B,kBAAX,CAA8B,MAAKjB,KAAnC,IAA4CU,QAA5C;AACD;AACF,aATuB,CAAxB;AAUD;AAEF,S;;8CAEDQ,M,qBAAS;AACP,cAAG,KAAKrB,gBAAR,EAAyB;AACvB,iBAAKA,gBAAL,CAAsBC,OAAtB;AACA,iBAAKD,gBAAL,GAAwB,IAAxB;AACD;AAEF,S","file":"vGrid/v-grid-attributes-observe-field.js","sourceRoot":"/source/","sourcesContent":["/*****************************************************************************************************************\r\n *    Just to have instant update on row events over to current entity\r\n *    Created by vegar ringdal\r\n *\r\n ****************************************************************************************************************/\r\nimport {inject, customAttribute, BindingEngine} from 'aurelia-framework';\r\nimport {VGrid} from './v-grid';\r\n\r\n\r\n@customAttribute('v-observe-field')\r\n@inject(Element, VGrid, BindingEngine)\r\nexport class vGridAttributesObserveField {\r\n\r\n\r\n  constructor(element, vGrid, bindingEngine) {\r\n    this.vGrid = vGrid;\r\n    this.element = element;\r\n    this.timer = null;\r\n    this.bindingEngine = bindingEngine;\r\n  }\r\n\r\n\r\n  bind(bindingContext, overrideContext) {\r\n    this.bindingContext = bindingContext;\r\n    this.overrideContext = overrideContext;\r\n\r\n    if(this.propertyObserver){\r\n      this.propertyObserver.dispose();\r\n      this.propertyObserver = null;\r\n    }\r\n\r\n    let attribute = this.value;\r\n\r\n    //if there is any value and rowRef\r\n    if (attribute && this.bindingContext.rowRef) {\r\n\r\n      //remove old binding to current entity\r\n      this.vGrid.vGridObservables.disableObservablesAttributes();\r\n\r\n      //add to our observer array\r\n      var attAttributeObserve = this.vGrid.vGridConfig.attAttributeObserve;\r\n      let attribute = this.value;\r\n      //if not allready added, then lets add them\r\n      if (attAttributeObserve.indexOf(attribute) === -1 && attribute) {\r\n        attAttributeObserve.push(attribute);\r\n      }\r\n      //enable observer\r\n      this.vGrid.vGridObservables.enableObservablesAttributes();\r\n\r\n\r\n      //observe property on rowref\r\n      this.propertyObserver = this.bindingEngine.propertyObserver(this.bindingContext.rowRef, this.value).subscribe((newValue, oldValue) => {\r\n\r\n        //should I do the value formatting on the currentEntity also?\r\n        var newValueCheck = (newValue !== undefined && newValue !== null) ? newValue.toString() : newValue;\r\n        var oldValueCheck = (oldValue !== undefined && oldValue !== null) ? oldValue.toString() : oldValue;\r\n\r\n        if (newValueCheck !== oldValueCheck && this.vGrid.vGridCurrentEntityRef) {\r\n          this.vGrid.vGridCurrentEntity[this.value] = newValue;\r\n        }\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  unbind() {\r\n    if(this.propertyObserver){\r\n      this.propertyObserver.dispose();\r\n      this.propertyObserver = null;\r\n    }\r\n\r\n  }\r\n\r\n\r\n}\r\n"]}