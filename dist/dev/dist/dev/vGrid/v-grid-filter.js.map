{"version":3,"sources":["vGrid/v-grid-filter.js"],"names":["VGridFilter","vGrid","lastFilter","queryStrings","filterOperatorTable","filterOperatorTableString","getNameOfFilter","name","run","objArray","ObjFilter","resultArray","filter","data","result","forEach","x","rowValue","filterValue","filterOperator","operator","newFilterOperator","typeBool","type","attribute","e","Number","value","toLowerCase","charAt","substr","length","toISOString","Date","indexOf","substring"],"mappings":"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","file":"vGrid/v-grid-filter.js","sourceRoot":"/source/","sourcesContent":["/*****************************************************************************************************************\r\n *    vGridFilter\r\n *    This just does the filtering on vGridCollection from the values the grid gives it\r\n *    Created by vegar ringdal\r\n *\r\n ****************************************************************************************************************/\r\nexport class VGridFilter {\r\n\r\n\r\n  /***************************************************************************************\r\n   * constsructor\r\n   ***************************************************************************************/\r\n  constructor(vGrid) {\r\n    this.vGrid = vGrid;\r\n  }\r\n\r\n  //not in use yet\r\n  lastFilter = [];\r\n  queryStrings = {};\r\n\r\n\r\n  ///filter table\r\n  filterOperatorTable = {\r\n    \"=\": 1,   //equal\r\n    \"<=\": 2,  //less than or equal to\r\n    \">=\": 3,  //greater than or equal to\r\n    \"<\": 4,   //less than\r\n    \">\": 5,   //greater than\r\n    \"*\": 6,   //contains\r\n    \"!=\": 7,  //not equal to\r\n    \"!*\": 8,  //does not contain\r\n    \"*=\": 9,  //begin with\r\n    \"=*\": 10  //end with\r\n  };\r\n\r\n\r\n  //filter table\r\n  filterOperatorTableString = {\r\n    \"=\": \"equals\",              //1\r\n    \"<=\": \"less than or eq\",    //2\r\n    \">=\": \"greater than or eq\", //3\r\n    \"<\": \"less than\",           //4\r\n    \">\": \"greater than\",        //5\r\n    \"*\": \"contains\",            //6\r\n    \"!=\": \"not equal to\",       //7\r\n    \"!*\": \"does not contain\",   //8\r\n    \"*=\": \"begins with\",        //9\r\n    \"=*\": \"ends with\"           //10\r\n  };\r\n\r\n\r\n  /***************************************************************************************\r\n   * run the name of filter\r\n   ***************************************************************************************/\r\n  getNameOfFilter(name) {\r\n    return this.filterOperatorTableString[name];\r\n  }\r\n\r\n  /***************************************************************************************\r\n   * run the filter\r\n   ***************************************************************************************/\r\n  run(objArray, ObjFilter) {\r\n\r\n    //my operators\r\n    let filterOperatorTable = this.filterOperatorTable;\r\n\r\n\r\n    var resultArray = objArray.filter(function (data) {\r\n\r\n\r\n      //lets have true as default, so all that should not be there we set false..\r\n      var result = true;\r\n      ObjFilter.forEach(function (x) {\r\n\r\n\r\n        //vars\r\n        var rowValue;\r\n        var filterValue;\r\n        var filterOperator = filterOperatorTable[x.operator];\r\n        var newFilterOperator;\r\n\r\n\r\n        //helper for boolean\r\n        var typeBool = {\r\n          \"true\": true,\r\n          \"false\": false\r\n        };\r\n\r\n\r\n        //set defult type\r\n        var type;\r\n        try {\r\n          type = typeof(data[x.attribute]);\r\n        } catch (e) {\r\n          type = \"string\";\r\n        }\r\n\r\n\r\n        //lets set som defaults\r\n        switch (type) {\r\n          case \"number\":\r\n            rowValue = data[x.attribute];\r\n            filterValue = Number(x.value);\r\n            filterOperator = filterOperator || 1;\r\n            if(filterOperator === 6){\r\n              filterOperator = 1;\r\n            }\r\n\r\n            break;\r\n          case \"string\":\r\n            rowValue = data[x.attribute].toLowerCase();\r\n            filterValue = x.value.toLowerCase();\r\n            filterOperator = filterOperator || 9;\r\n            newFilterOperator = filterOperator;\r\n\r\n            //todo: add more options here and replace with a switch.., also\r\n\r\n            //if filter operator is BEGIN WITH\r\n            if (x.value.charAt(0) === \"*\" && filterOperator === 9) {\r\n              newFilterOperator = 6;\r\n              filterValue = filterValue.substr(1, filterValue.length);\r\n            }\r\n\r\n\r\n            //if filter operator is EQUAL TO\r\n            //wildcard first = end with\r\n            if (x.value.charAt(0) === \"*\" && filterOperator === 1) {\r\n              newFilterOperator = 10;\r\n              filterValue = filterValue.substr(1, filterValue.length);\r\n            }\r\n\r\n\r\n            //wildcard end and first = contains\r\n            if (x.value.charAt(x.value.length - 1) === \"*\" && filterOperator === 1 && newFilterOperator === 10) {\r\n              newFilterOperator = 6;\r\n              filterValue = filterValue.substr(0, filterValue.length - 1);\r\n            }\r\n\r\n\r\n            //begin with since wildcard is in the end\r\n            if (x.value.charAt(x.value.length - 1) === \"*\" && filterOperator === 1 && newFilterOperator !== 10 && newFilterOperator !== 6) {\r\n              newFilterOperator = 9;\r\n              filterValue = filterValue.substr(0, filterValue.length - 1);\r\n            }\r\n\r\n\r\n            //set the filteroperator from new if changed\r\n            if (filterOperator !== newFilterOperator) {\r\n              filterOperator = newFilterOperator;\r\n            }\r\n            break;\r\n\r\n\r\n          case \"boolean\":\r\n            rowValue = data[x.attribute];\r\n            filterValue = typeBool[x.value];\r\n            filterOperator = 1;\r\n            break;\r\n\r\n\r\n          case \"object\":\r\n            rowValue = data[x.attribute].toISOString();\r\n            filterValue = new Date(x.value).toISOString(); //todo, this needs to be better...\r\n            filterOperator = filterOperator || 2;\r\n            break;\r\n\r\n\r\n          default :\r\n            //todo: take the stuff under equal to and put in a function and also call i from here.. or just make it fail?\r\n            rowValue = data[x.attribute].toLowerCase();\r\n            filterValue = x.value.toLowerCase();\r\n            filterOperator = filterOperator || 1;\r\n            break;\r\n        }\r\n\r\n\r\n        //filter from what operator used\r\n        switch (filterOperator) {\r\n          case 1: //equal\r\n            if (rowValue !== filterValue) {\r\n              result = false;\r\n            }\r\n            break;\r\n          case 2: //less or equal\r\n            if (!(rowValue <= filterValue)) {\r\n              result = false;\r\n            }\r\n            break;\r\n          case 3: //greater or equal\r\n            if (!(rowValue >= filterValue)) {\r\n              result = false;\r\n            }\r\n            break;\r\n          case 4://greate\r\n            if (!(rowValue < filterValue)) {\r\n              result = false;\r\n            }\r\n            break;\r\n          case 5: //greater\r\n            if (!(rowValue > filterValue)) {\r\n              result = false;\r\n            }\r\n            break;\r\n          case 6: //contains\r\n            if (rowValue.indexOf(filterValue) === -1) {\r\n              result = false;\r\n            }\r\n            break;\r\n          case 7: //not equal to\r\n            if (rowValue !== filterValue) {\r\n              result = false;\r\n            }\r\n            break;\r\n          case 8: //does not contain\r\n            if (rowValue.indexOf(filterValue) !== -1) {\r\n              result = false;\r\n            }\r\n            break;\r\n          case 9: //begin with\r\n            if (rowValue.substring(0, filterValue.length) !== filterValue) {\r\n              result = false;\r\n            }\r\n            break;\r\n          case 10: //end with\r\n            if (rowValue.substring(rowValue.length - filterValue.length, rowValue.length) !== filterValue) {\r\n              result = false;\r\n            }\r\n            break;\r\n          default :\r\n            if (rowValue !== filterValue) {\r\n              result = false;\r\n            }\r\n        }\r\n        if (type === \"string\") {\r\n          if (x.value.charAt(0) === \"*\" && x.value.length === 1) {\r\n            result = true\r\n          }\r\n        }\r\n\r\n\r\n      });//end foreach obj\r\n      return result\r\n\r\n    });\r\n    return resultArray;\r\n  };\r\n}//end class\r\n"]}